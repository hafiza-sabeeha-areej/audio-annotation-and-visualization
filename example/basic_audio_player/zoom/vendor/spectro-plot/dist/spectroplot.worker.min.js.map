{"version":3,"file":"spectroplot.worker.min.js","mappings":"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","sources":["webpack://spectroplot/webpack/universalModuleDefinition","webpack://spectroplot/./lib/fft_nayuki.js","webpack://spectroplot/./lib/polyfill.js","webpack://spectroplot/./lib/samples.js","webpack://spectroplot/webpack/bootstrap","webpack://spectroplot/webpack/runtime/compat get default export","webpack://spectroplot/webpack/runtime/define property getters","webpack://spectroplot/webpack/runtime/hasOwnProperty shorthand","webpack://spectroplot/webpack/runtime/make namespace object","webpack://spectroplot/./lib/worker.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function() {\nreturn ","/**\n * @file Free FFT and convolution (JavaScript)\n *\n * @copyright 2017 Project Nayuki. (MIT License)\n * @see https://www.nayuki.io/page/free-small-fft-in-multiple-languages\n * @author Wrapped as ES6 module by Christian W. Zuckschwerdt <zany@triq.net>\n * @license\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n * - The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n * - The Software is provided \"as is\", without warranty of any kind, express or\n *   implied, including but not limited to the warranties of merchantability,\n *   fitness for a particular purpose and noninfringement. In no event shall the\n *   authors or copyright holders be liable for any claim, damages or other\n *   liability, whether in an action of contract, tort or otherwise, arising from,\n *   out of or in connection with the Software or the use or other dealings in the\n *   Software.\n */\n\n/*\n * Construct an object for calculating the discrete Fourier transform (DFT) of size n, where n is a power of 2.\n */\nclass FFTNayuki {\n    constructor(n) {\n        this.n = n;\n        this.levels = -1;\n\n        // Length variables\n        for (let i = 0; i < 32; i++) {\n            if (1 << i == n)\n                this.levels = i;  // Equal to log2(n)\n        }\n        if (this.levels == -1)\n            throw 'Length is not a power of 2';\n\n        // Trigonometric tables\n        this.cosTable = new Array(n / 2);\n        this.sinTable = new Array(n / 2);\n        for (let i = 0; i < n / 2; i++) {\n            this.cosTable[i] = Math.cos(2 * Math.PI * i / n);\n            this.sinTable[i] = Math.sin(2 * Math.PI * i / n);\n        }\n    }\n\n    /*\n     * Computes the discrete Fourier transform (DFT) of the given complex vector, storing the result back into the vector.\n     * The vector's length must be a power of 2. Uses the Cooley-Tukey decimation-in-time radix-2 algorithm.\n     */\n    transform(real, imag) {\n        const n = this.n;\n\n        // Bit-reversed addressing permutation\n        for (let i = 0; i < n; i++) {\n            const j = reverseBits(i, this.levels);\n            if (j > i) {\n                let temp = real[i];\n                real[i] = real[j];\n                real[j] = temp;\n                temp = imag[i];\n                imag[i] = imag[j];\n                imag[j] = temp;\n            }\n        }\n\n        // Cooley-Tukey decimation-in-time radix-2 FFT\n        for (let size = 2; size <= n; size *= 2) {\n            const halfsize = size / 2;\n            const tablestep = n / size;\n            for (let i = 0; i < n; i += size) {\n                for (let j = i, k = 0; j < i + halfsize; j++, k += tablestep) {\n                    const l = j + halfsize;\n                    const tpre =  real[l] * this.cosTable[k] + imag[l] * this.sinTable[k];\n                    const tpim = -real[l] * this.sinTable[k] + imag[l] * this.cosTable[k];\n                    real[l] = real[j] - tpre;\n                    imag[l] = imag[j] - tpim;\n                    real[j] += tpre;\n                    imag[j] += tpim;\n                }\n            }\n        }\n\n        // Returns the integer whose value is the reverse of the lowest 'bits' bits of the integer 'x'.\n        function reverseBits(x, bits) {\n            let y = 0;\n            for (let i = 0; i < bits; i++) {\n                y = (y << 1) | (x & 1);\n                x >>>= 1;\n            }\n            return y;\n        }\n    }\n\n    // Post-process complex DFT into two real channels.\n    // X[k] =    0.5 Z[k] + Z*[N-k]\n    // Y[k] = -j 0.5 Z[k] - Z*[N-k]\n    // left channel is index 0 to n/2-1, right channel is index n-1 to n/2.\n    // s.a. http://www.ti.com/lit/an/spra291/spra291.pdf\n    splitreal(real, imag) {\n        const n = this.n;\n        //real[0] = real[0]\n        imag[0] = 0\n        real[n / 2] = imag[0]\n        imag[n / 2] = 0\n        for (let i = 1; i < n / 2; i += 1) {\n            const lr = 0.5 * (real[i] + real[n - i])\n            const li = 0.5 * (imag[i] - imag[n - i])\n            const rr = 0.5 * (imag[i] + imag[n - i])\n            const ri = 0.5 * (-real[i] + real[n - i])\n            real[i] = lr\n            imag[i] = li\n            real[n - i] = rr\n            imag[n - i] = ri\n        }\n    }\n}\n\nexport default FFTNayuki\n","/**\n    @file Various polyfill snippets from MDN.\n\n    @copyright CC0 Licenses for code examples and snippets\n    @license\n    Any copyright is dedicated to the Public Domain. http://creativecommons.org/publicdomain/zero/1.0/\n*/\n\n// polyfill: Object.assign\nif (!Object.assign)\n    Object.assign = function (target, ...sources) {\n        return sources.reduce(function (r, o) {\n            Object.keys(o).forEach(function (k) {\n                r[k] = o[k];\n            });\n            return r;\n        }, target);\n    };\n\n// polyfill: Math.clamp\nif (!Math.clamp)\n    Math.clamp = function (x, lower, upper) {\n        return Math.max(lower, Math.min(x, upper));\n    };\n\n// polyfill: Math.log10\nif (!Math.log10)\n    Math.log10 = function (x) {\n        return Math.log(x) * Math.LOG10E;\n    };\n\n\n// polyfill: Math.log2\nif (!Math.log2)\n    Math.log2 = function (x) {\n        return Math.log(x) * Math.LOG2E;\n    };\n\n// polyfill IE: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill#Polyfill\nif (!Array.prototype.fill)\n    Object.defineProperty(Array.prototype, 'fill', {\n        value: function (value) {\n\n            // Steps 1-2.\n            if (this == null) {\n                throw new TypeError('this is null or not defined');\n            }\n\n            var O = Object(this);\n\n            // Steps 3-5.\n            var len = O.length >>> 0;\n\n            // Steps 6-7.\n            var start = arguments[1];\n            var relativeStart = start >> 0;\n\n            // Step 8.\n            var k = relativeStart < 0 ?\n                Math.max(len + relativeStart, 0) :\n                Math.min(relativeStart, len);\n\n            // Steps 9-10.\n            var end = arguments[2];\n            var relativeEnd = end === undefined ?\n                len : end >> 0;\n\n            // Step 11.\n            var final = relativeEnd < 0 ?\n                Math.max(len + relativeEnd, 0) :\n                Math.min(relativeEnd, len);\n\n            // Step 12.\n            while (k < final) {\n                O[k] = value;\n                k++;\n            }\n\n            // Step 13.\n            return O;\n        }\n    });\n","/**\n    @file Class for viewing sample formats.\n\n    @author Christian W. Zuckschwerdt <zany@triq.net>\n    @copyright Christian W. Zuckschwerdt, 2019\n    @license\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 2 of the License, or\n    (at your option) any later version.\n*/\n\n/** Class for viewing sample formats. */\nclass SampleView {\n    constructor(format, buffer, sampleRate, centerFreq) {\n        /** A float representing the sample rate, in samples per second, of the data stored in the buffer. */\n        this.sampleRate = sampleRate || 250000\n\n        /** A float representing the center frequency, in Hz, of the data stored in the buffer. */\n        this.centerFreq = centerFreq || 0\n\n        format = format.toUpperCase()\n        /** A string representing the data format, of the data stored in the buffer. */\n        this.format = format\n\n        // TODO: Endianess?\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n        let typedArray, sampleBias, sampleScale, sampleWidth\n        if (format == 'CU4') {\n            // CU4 - Uint8Array (needs unpacking)\n            sampleBias = 7.5\n            sampleScale = 1.0 / 7.5\n            sampleWidth = 1 // bytes\n            typedArray = Uint8Array\n            this.sampleI = this.unpackI_CU4\n            this.sampleQ = this.unpackQ_CU4\n        }\n        else if (format == 'CS4') {\n            // CS4 - Uint8Array (needs unpacking)\n            sampleBias = 0\n            sampleScale = 1.0 / 8.0\n            sampleWidth = 1 // bytes\n            typedArray = Uint8Array\n            this.sampleI = this.unpackI_CS4\n            this.sampleQ = this.unpackQ_CS4\n        }\n        else if (format == 'CU8' || format == 'DATA' || format == 'COMPLEX16U') {\n            // CU8 - Uint8Array\n            sampleBias = 127.5 // or 127? or 128?\n            sampleScale = 1.0 / 127.5\n            sampleWidth = 2 // bytes\n            typedArray = Uint8Array\n        }\n        else if (format == 'CS8' || format == 'COMPLEX16S') {\n            // CS8 - Int8Array\n            sampleBias = 0\n            sampleScale = 1.0 / 128.0\n            sampleWidth = 2 // bytes\n            typedArray = Int8Array\n        }\n        else if (format == 'CU16') {\n            // CU16 - Uint16Array\n            sampleBias = 32767.5\n            sampleScale = 1.0 / 32768.0\n            sampleWidth = 4 // bytes\n            typedArray = Uint16Array\n        }\n        else if (format == 'CS16') {\n            // CS16 - Int16Array\n            sampleBias = 0\n            sampleScale = 1.0 / 32768.0\n            sampleWidth = 4 // bytes\n            typedArray = Int16Array\n        }\n        else if (format == 'CU12') {\n            // CU12 - Uint8Array (needs unpacking)\n            sampleBias = 2047.5\n            sampleScale = 1.0 / 2047.5\n            sampleWidth = 3 // bytes\n            typedArray = Uint8Array\n            this.sampleI = this.unpackI_CU12\n            this.sampleQ = this.unpackQ_CU12\n        }\n        else if (format == 'CS12') {\n            // CS12 - Uint8Array (needs unpacking)\n            sampleBias = 0\n            sampleScale = 1.0 / 2048.0\n            sampleWidth = 3 // bytes\n            typedArray = Uint8Array\n            this.sampleI = this.unpackI_CS12\n            this.sampleQ = this.unpackQ_CS12\n        }\n        else if (format == 'CU32') {\n            // CU32 - Uint32Array\n            sampleBias = 2147483647.5\n            sampleScale = 1.0 / 2147483648.0\n            sampleWidth = 8 // bytes\n            typedArray = Uint32Array\n        }\n        else if (format == 'CS32') {\n            // CS32 - Int32Array\n            sampleBias = 0\n            sampleScale = 1.0 / 2147483648.0\n            sampleWidth = 8 // bytes\n            typedArray = Int32Array\n        }\n        else if (format == 'CU64') {\n            // CU64 - Uint64Array (needs translation)\n            sampleBias = 1.0\n            sampleScale = 1.0\n            sampleWidth = 16 // bytes\n            typedArray = Uint32Array\n            this.sampleI = this.unpackI_CU64\n            this.sampleQ = this.unpackQ_CU64\n        }\n        else if (format == 'CS64') {\n            // CS64 - Int64Array (needs translation)\n            sampleBias = 0\n            sampleScale = 1.0\n            sampleWidth = 16 // bytes\n            typedArray = Uint32Array\n            this.sampleI = this.unpackI_CS64\n            this.sampleQ = this.unpackQ_CS64\n        }\n        else if (format == 'CF32' || format == 'CFILE' || format == 'COMPLEX') {\n            // CF32 - Float32Array\n            sampleBias = 0\n            sampleScale = 1.0\n            sampleWidth = 8 // bytes\n            typedArray = Float32Array\n        }\n        else if (format == 'CF64') {\n            // CF64 - Float64Array\n            sampleBias = 0\n            sampleScale = 1.0\n            sampleWidth = 16 // bytes\n            typedArray = Float64Array\n        }\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats#Browser_compatibility\n        else if (format == 'WAV' || format == 'BWF' || format == 'WEBM' || format == 'OGG' || format == 'OPUS'\n                || format == 'FLAC' || format == 'MP4' || format == 'M4A' || format == 'AAC' || format == 'MP3') {\n            buffer = null // need to wait for Promise resolve\n            sampleWidth = 8 // bytes\n            this.sampleI = this.unpackI_audio\n            this.sampleQ = this.unpackQ_audio\n            this.format = 'CF32' // force format on decompressed buffer\n        }\n        else {\n            // default to CU8 - Uint8Array\n            sampleBias = 127.5 // or 127? or 128?\n            sampleScale = 1.0 / 127.5\n            sampleWidth = 2 // bytes\n            typedArray = Uint8Array\n        }\n        this.sampleBias = sampleBias\n        this.sampleScale = sampleScale\n        this.sampleWidth = sampleWidth\n        this.typedArray = typedArray\n\n        if (buffer) {\n            this.buffer = buffer\n            this.view = new typedArray(buffer)\n            // generally:\n            // this.sampleCount = this.view.length / 2 // I+Q\n            // but for CS12 rather:\n            this.sampleCount = buffer.byteLength / this.sampleWidth\n        }\n    }\n\n    loadBuffer(buffer) {\n        if (this.typedArray) {\n            this.buffer = buffer\n            this.view = new this.typedArray(buffer)\n            // generally:\n            // this.sampleCount = this.view.length / 2 // I+Q\n            // but for CS12 rather:\n            this.sampleCount = buffer.byteLength / this.sampleWidth\n            return Promise.resolve()\n        } else {\n            return this.readAudio(buffer)\n        }\n    }\n\n    /// This will give a noisy envelope of OOK/ASK signals.\n    /// Subtracts the bias (-128) and calculates the norm (scaled by 16384).\n    amplitude_cu8() {\n        const am_buf = new Uint16Array(this.sampleCount)\n        for (let i = 0; i < this.sampleCount; i++) {\n            let x = 127 - this.view[2 * i]\n            let y = 127 - this.view[2 * i + 1]\n            am_buf[i]  = x * x + y * y // max 32768, fs 16384\n        }\n        return am_buf\n    }\n\n    /// 122/128, 51/128 Magnitude Estimator for CU8 (SIMD has min/max).\n    /// Note that magnitude emphasizes quiet signals / deemphasizes loud signals.\n    magnitude_est_cu8() {\n        const am_buf = new Uint16Array(this.sampleCount)\n        for (let i = 0; i < this.sampleCount; i++) {\n            let x = Math.abs(this.view[2 * i] - 128)\n            let y = Math.abs(this.view[2 * i + 1] - 128)\n            let mi = x < y ? x : y\n            let mx = x > y ? x : y\n            let mag_est = 122 * mx + 51 * mi\n            am_buf[i] = mag_est // max 22144, fs 16384\n        }\n        return am_buf\n    }\n\n    /// True Magnitude for CU8 (sqrt can SIMD but float is slow).\n    magnitude_true_cu8() {\n        const am_buf = new Uint16Array(this.sampleCount)\n        for (let i = 0; i < this.sampleCount; i++) {\n            let x = this.view[2 * i] - 128\n            let y = this.view[2 * i + 1] - 128\n            am_buf[i]  = Math.sqrt(x * x + y * y) * 128.0 // max 181, scaled 23170, fs 16384\n        }\n        return am_buf\n    }\n\n    /// 122/128, 51/128 Magnitude Estimator for CS16 (SIMD has min/max).\n    magnitude_est_cs16() {\n        const am_buf = new Uint16Array(this.sampleCount)\n        for (let i = 0; i < this.sampleCount; i++) {\n            let x = Math.abs(this.view[2 * i])\n            let y = Math.abs(this.view[2 * i + 1])\n            let mi = x < y ? x : y\n            let mx = x > y ? x : y\n            let mag_est = 122 * mx + 51 * mi\n            am_buf[i] = mag_est >> 8 // max 5668864, scaled 22144, fs 16384\n        }\n        return am_buf\n    }\n\n    /// True Magnitude for CS16 (sqrt can SIMD but float is slow).\n    magnitude_true_cs16() {\n        const am_buf = new Uint16Array(this.sampleCount)\n        for (let i = 0; i < this.sampleCount; i++) {\n            let x = this.view[2 * i]\n            let y = this.view[2 * i + 1]\n            am_buf[i]  = Math.sqrt(x * x + y * y) >> 1 // max 46341, scaled 23170, fs 16384\n        }\n        return am_buf\n    }\n\n    /** The duration property returns a double representing the duration, in seconds, of the data stored in the buffer. */\n    get duration() {\n        return this.sampleCount / this.sampleRate\n    }\n\n    slice(sliceIndex, sliceCount, startSample, endSample) {\n        startSample = startSample || 0\n        endSample = endSample || ~~(this.sampleCount)\n        const sliceLength = this.sampleWidth * ~~((endSample - startSample) / sliceCount)\n        return this.buffer.slice(startSample * this.sampleWidth + sliceLength * sliceIndex, startSample * this.sampleWidth + sliceLength * (sliceIndex + 1))\n    }\n\n    readAudio(audioData) {\n        const audioCtx = new (window.AudioContext || window.webkitAudioContext)()\n        return audioCtx.decodeAudioData(audioData)\n            .then(buffer => {\n                this.audioBuffer = buffer\n                this.sampleCount = buffer.length\n                this.sampleRate = buffer.sampleRate\n                this.view = this.interleaved()\n                this.buffer = this.view.buffer\n                //console.log('decodeAudioData', buffer, this.view, this.buffer)\n            })\n            .catch(error => {\n                if (!this.audioBuffer)\n                    throw `decodeAudioData error: ${error}`\n            })\n    }\n    interleaved() {\n        if (!this.audioBuffer) {\n            console.error('AudioBuffer not initialized')\n            throw 'AudioBuffer not initialized'\n        }\n        if (this.audioBuffer.numberOfChannels < 1) {\n            console.error(`AudioBuffer wrong numberOfChannels (${this.audioBuffer.numberOfChannels})`)\n            throw `AudioBuffer wrong numberOfChannels (${this.audioBuffer.numberOfChannels})`\n        }\n        if (this.audioBuffer.numberOfChannels == 1) {\n            console.warn('AudioBuffer is mono, duplicating channel to stereo')\n        }\n        if (this.audioBuffer.numberOfChannels > 2) {\n            console.warn(`AudioBuffer has too many channels (${this.audioBuffer.numberOfChannels}), using first two`)\n        }\n        const n = this.sampleCount\n        const data = new Float32Array(n * 2)\n        const ch0 = this.audioBuffer.getChannelData(0)\n        const ch1 = this.audioBuffer.numberOfChannels > 1\n            ? this.audioBuffer.getChannelData(1)\n            : this.audioBuffer.getChannelData(0)\n        for (let i = 0; i < n; i += 1) {\n            data[2 * i + 0] = ch0[i]\n            data[2 * i + 1] = ch1[i]\n        }\n        return data\n    }\n    unpackI_audio(pos) {\n        const channel = this.audioBuffer.getChannelData(0)\n        return channel[pos]\n    }\n    unpackQ_audio(pos) {\n        const channel = this.audioBuffer.getChannelData(1)\n        return channel[pos]\n    }\n\n    // read 8 bit (iq), note the intermediate is Q0.3, LSB aligned\n    unpackI_CU4(pos) {\n        const b0 = this.view[1 * pos + 0]\n        const s = (b0 & 0xf0) >> 4\n        return (s - this.sampleBias) * this.sampleScale\n    }\n    unpackQ_CU4(pos) {\n        const b0 = this.view[1 * pos + 0]\n        const s = (b0 & 0x0f) >> 0\n        return (s - this.sampleBias) * this.sampleScale\n    }\n\n    // read 8 bit (iq), note the intermediate is Q0.31, MSB aligned Int32 for sign-extend\n    unpackI_CS4(pos) {\n        const b0 = this.view[1 * pos + 0]\n        const s = ((b0 & 0xf0) << 24) >> 28\n        return s * this.sampleScale\n    }\n    unpackQ_CS4(pos) {\n        const b0 = this.view[1 * pos + 0]\n        const s = ((b0 & 0x0f) << 28) >> 28\n        return s * this.sampleScale\n    }\n\n    // read 24 bit (iiqIQQ), note the intermediate is Q0.12, LSB aligned\n    unpackI_CU12(pos) {\n        const b0 = this.view[3 * pos + 0]\n        const b1 = this.view[3 * pos + 1]\n        const s = ((b1 & 0x0f) << 8) | (b0)\n        return (s - this.sampleBias) * this.sampleScale\n    }\n    unpackQ_CU12(pos) {\n        const b1 = this.view[3 * pos + 1]\n        const b2 = this.view[3 * pos + 2]\n        const s = (b2 << 4) | ((b1 & 0xf0) >> 4)\n        return (s - this.sampleBias) * this.sampleScale\n    }\n\n    // read 24 bit (iiqIQQ), note the intermediate is Q0.31, MSB aligned Int32 for sign-extend\n    unpackI_CS12(pos) {\n        const b0 = this.view[3 * pos + 0]\n        const b1 = this.view[3 * pos + 1]\n        const s = (((b1 & 0x0f) << 28) | (b0 << 20)) >> 20\n        return s * this.sampleScale\n    }\n    unpackQ_CS12(pos) {\n        const b1 = this.view[3 * pos + 1]\n        const b2 = this.view[3 * pos + 2]\n        const s = ((b2 << 24) | ((b1 & 0xf0) << 16)) >> 20\n        return s * this.sampleScale\n    }\n\n    // read 64 bit signed data as 53 bits float, this might loose lots of precision\n    unpackI_CU64(pos) {\n        const b0 = this.view[4 * pos + 0]\n        const b1 = this.view[4 * pos + 1]\n        const s = (b1) / 2 ** 31 + (b0 / 2 ** 64)\n        return (s - this.sampleBias)\n    }\n    unpackQ_CU64(pos) {\n        const b0 = this.view[4 * pos + 2]\n        const b1 = this.view[4 * pos + 3]\n        const s = (b1) / 2 ** 31 + (b0 / 2 ** 64)\n        return (s - this.sampleBias)\n    }\n\n    // read 64 bit signed data as 53 bits float, this might loose lots of precision\n    unpackI_CS64(pos) {\n        const b0 = this.view[4 * pos + 0]\n        const b1 = this.view[4 * pos + 1]\n        const s = (b1 >> 0) / 2 ** 31 + (b0 / 2 ** 64)\n        return s\n    }\n    unpackQ_CS64(pos) {\n        const b0 = this.view[4 * pos + 2]\n        const b1 = this.view[4 * pos + 3]\n        const s = (b1 >> 0) / 2 ** 31 + (b0 / 2 ** 64)\n        return s\n    }\n\n    /** The sample of the I-channel at index `pos`, of the data stored in the buffer. */\n    sampleI(pos) {\n        return (this.view[2 * pos + 0] - this.sampleBias) * this.sampleScale\n    }\n\n    /** The sample of the Q-channel at index `pos`, of the data stored in the buffer. */\n    sampleQ(pos) {\n        return (this.view[2 * pos + 1] - this.sampleBias) * this.sampleScale\n    }\n}\n\nexport default SampleView\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n    @file Worker to render an FFT to image.\n\n    @author Christian W. Zuckschwerdt <zany@triq.net>\n    @copyright Christian W. Zuckschwerdt, 2019\n    @license\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 2 of the License, or\n    (at your option) any later version.\n*/\n\n/*eslint no-console: \"off\"*/\n\nimport './polyfill';\nimport SampleView from './samples';\nimport FFTNayuki from './fft_nayuki';\n\nlet fftN\nlet fft\n\n/** Function for rendering an FFT to image. */\nfunction renderFft(ctx) {\n    const sampleView = new SampleView(ctx.format, ctx.buffer);\n    const gauge_mins = new Uint8ClampedArray(new ArrayBuffer(ctx.width));\n    const gauge_maxs = new Uint8ClampedArray(new ArrayBuffer(ctx.width));\n    const gauge_amps = new Uint8ClampedArray(new ArrayBuffer(ctx.width));\n\n    const sampleCount = sampleView.sampleCount;\n\n    const block_norm = ctx.block_norm;\n    const block_norm_db = 10 * Math.log10(block_norm);\n    const gain = ctx.gain;\n    const dB_range = ctx.range;\n    let dBfs_min = 0.0;\n    let dBfs_max = -200.0;\n    const cmap = ctx.cmap;\n    const color_max = cmap.length - 1;\n    const color_norm = cmap.length / -dB_range;\n\n    const cB_hist_size = 1000; // centi Bell (0.1 dB)\n    const cB_hist = new Array(cB_hist_size).fill(0); // -0.0 to -100.0 dB\n    const c_hist = new Array(cmap.length).fill(0);\n\n    const n = ctx.n;\n    const windowc = ctx.windowc;\n    const height = n;\n    const width = ctx.width;\n    const points = width;\n    const stride = (sampleCount - n) / (points - 1);\n    const waterfall = ctx.waterfall\n    // const imageData = new ImageData(width, height); // would need polyfill\n    const byteCount = 4 * width * height\n    const imageData = { data: new Uint8ClampedArray(byteCount) };\n    ////const imageBuffer = new ArrayBuffer(width * height * 4);\n    //const imageBuffer = ctx.image;\n    //const imageData = new Uint8ClampedArray(imageBuffer);\n\n    if (fftN != n) {\n        fft = new FFTNayuki(n);\n        fftN = n;\n    }\n    const real = new Array(n);\n    const imag = new Array(n);\n\n    //console.time('fft worker');\n    // faster to cast floats to int with bitwise nops than Math.round\n    for (let x = 0; x < width; x++) {\n\n        for (let k = 0; k < n; k++) {\n            //const pos = 2 * (Math.round(stride * x) + k);\n            const pos = ~~(0.5 + stride * x) + k;\n            real[k] = windowc[k] * sampleView.sampleI(pos);\n            imag[k] = windowc[k] * sampleView.sampleQ(pos);\n        }\n\n        fft.transform(real, imag);\n        if (ctx.channelMode) {\n            fft.splitreal(real, imag);\n        }\n\n        let dBfs_min_i = 0.0;\n        let dBfs_max_i = -200.0;\n\n        for (let i = 0; i < n; i++) {\n        // for (let y = 0; y < n; y++) {\n            // the positive frequencies are stored in the first half and\n            // the negative frequencies are stored in backwards order in the second half.\n            // (The frequency -k/n is the same as the frequency (n-k)/n.)\n            const y = i <= n / 2 ? n / 2 - i : n / 2 + n - i;\n            //const i = y < n / 2 ? n / 2 - 1 - y : n / 2 - 1 + n - y;\n            const abs2 = real[i] * real[i] + imag[i] * imag[i];\n            let dBfs = 5 * Math.log10(abs2) + block_norm_db + gain;\n\n            //                const mean = 22;\n            //                const sdev = 1;\n            //                const xg = (-dBfs - mean) / sdev;\n            //                const gauss = 1 / sdev * 1 / Math.sqrt(2 * Math.PI) * Math.exp(-0.5 * xg * xg);\n            //                //console.log(gauss);\n            //                dBfs *= gauss * 8 - 6;\n\n            if (dBfs - gain < dBfs_min_i) dBfs_min_i = dBfs - gain;\n            if (dBfs - gain > dBfs_max_i) dBfs_max_i = dBfs - gain;\n\n            const cBabs = ~~(0.5 + (dBfs - gain) * -10);\n            cB_hist[cBabs >= cB_hist_size ? cB_hist_size - 1 : cBabs] += 1;\n\n            //const gray = color_max - Math.clamp(Math.round(dBfs * color_norm), 0, color_max);\n            //const gray = Math.round(Math.clamp(color_max - dBfs * color_norm, 0, color_max));\n            //const gray = ~~(0.5 + Math.clamp(color_max - dBfs * color_norm, 0, color_max));\n            const grayU = color_max - dBfs * color_norm;\n            const gray = ~~(0.5 + (grayU < 0 ? 0 : grayU > color_max ? color_max : grayU));\n            c_hist[gray] += 1;\n            const color = cmap[gray];\n            const j = waterfall\n                ? height * (width - 1 - x) * 4 + (n - 1 - y) * 4\n                : x * 4 + width * y * 4;\n            imageData.data[j + 0] = color[0]; // R\n            imageData.data[j + 1] = color[1]; // G\n            imageData.data[j + 2] = color[2]; // B\n            imageData.data[j + 3] = 255; // A\n        }\n\n        if (dBfs_min_i < dBfs_min) dBfs_min = dBfs_min_i;\n        if (dBfs_max_i > dBfs_max) dBfs_max = dBfs_max_i;\n\n        // amplitude gauge\n        gauge_mins[x] = 0.5 + (dB_range + dBfs_min_i) * 256 / dB_range;\n        gauge_maxs[x] = 0.5 + (dB_range + dBfs_max_i) * 256 / dB_range;\n\n        const mid = ~~(0.5 + stride * x) + n/2;\n        const re =  sampleView.sampleI(mid);\n        const im =  sampleView.sampleQ(mid);\n        const abs2 = re * re + im * im;\n        let dBfs_amp = 5 * Math.log10(abs2) + gain;\n        gauge_amps[x] = 0.5 + (dB_range + dBfs_amp) * 256 / dB_range;\n    }\n    //console.timeEnd('fft worker');\n\n    postMessage({\n        cB_hist: cB_hist,\n        c_hist: c_hist,\n        dBfs_min: dBfs_min,\n        dBfs_max: dBfs_max,\n        offset: ctx.offset,\n        gauge_mins: gauge_mins,\n        gauge_maxs: gauge_maxs,\n        gauge_amps: gauge_amps,\n        imageData: imageData,\n    }, [\n        gauge_mins.buffer,\n        gauge_maxs.buffer,\n        gauge_amps.buffer,\n        imageData.data.buffer,\n    ]);\n}\n\nonmessage = function (e) {\n    if (e.data && e.data.buffer) {\n        if (self.performance)\n            performance.mark('render-start');\n\n        renderFft(e.data);\n\n        if (self.performance) {\n            performance.mark('render-end');\n            performance.measure('render', 'render-start', 'render-end');\n\n            // Get all of the measures out.\n            // In this case there is only one.\n            var measures = performance.getEntriesByName('render');\n            var measure = measures[0];\n            console.log(`worker render: ${measure.duration.toFixed(2)}ms`);\n\n            // Clean up the stored markers.\n            performance.clearMarks();\n            performance.clearMeasures();\n        }\n    }\n};\n"],"names":["root","factory","exports","module","define","amd","a","i","self","constructor","n","this","levels","cosTable","Array","sinTable","Math","cos","PI","sin","transform","real","imag","j","reverseBits","temp","size","halfsize","tablestep","k","l","tpre","tpim","x","bits","y","splitreal","lr","li","rr","ri","Object","assign","target","sources","reduce","r","o","keys","forEach","clamp","lower","upper","max","min","log10","log","LOG10E","log2","LOG2E","prototype","fill","defineProperty","value","TypeError","O","len","length","start","arguments","relativeStart","end","relativeEnd","undefined","final","format","buffer","sampleRate","centerFreq","typedArray","sampleBias","sampleScale","sampleWidth","toUpperCase","Uint8Array","sampleI","unpackI_CU4","sampleQ","unpackQ_CU4","unpackI_CS4","unpackQ_CS4","Int8Array","Uint16Array","Int16Array","unpackI_CU12","unpackQ_CU12","unpackI_CS12","unpackQ_CS12","Uint32Array","Int32Array","unpackI_CU64","unpackQ_CU64","unpackI_CS64","unpackQ_CS64","Float32Array","Float64Array","unpackI_audio","unpackQ_audio","view","sampleCount","byteLength","loadBuffer","Promise","resolve","readAudio","amplitude_cu8","am_buf","magnitude_est_cu8","abs","mag_est","magnitude_true_cu8","sqrt","magnitude_est_cs16","magnitude_true_cs16","duration","slice","sliceIndex","sliceCount","startSample","endSample","sliceLength","audioData","window","AudioContext","webkitAudioContext","decodeAudioData","then","audioBuffer","interleaved","catch","error","console","numberOfChannels","warn","data","ch0","getChannelData","ch1","pos","b0","b1","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","d","definition","key","enumerable","get","obj","prop","hasOwnProperty","call","Symbol","toStringTag","fftN","fft","onmessage","e","performance","mark","ctx","sampleView","SampleView","gauge_mins","Uint8ClampedArray","ArrayBuffer","width","gauge_maxs","gauge_amps","block_norm","block_norm_db","gain","dB_range","range","dBfs_min","dBfs_max","cmap","color_max","color_norm","cB_hist_size","cB_hist","c_hist","windowc","height","stride","waterfall","imageData","FFTNayuki","channelMode","dBfs_min_i","dBfs_max_i","abs2","dBfs","cBabs","grayU","gray","color","mid","re","im","dBfs_amp","postMessage","offset","renderFft","measure","getEntriesByName","toFixed","clearMarks","clearMeasures"],"sourceRoot":""}